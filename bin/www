#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('lensert-server:server');
var io = require('../io')

/**
 * Create HTTP(S) server.
 */

var servers = require('../server').servers()

/**
 * Listen on provided port, on all network interfaces.
 */

servers.forEach(index => {
    module.exports = index.server.listen(index.port)
    index.server.on('error', onError)
    index.server.on('listening', function () {
        var addr =  index.server.address();
        var bind = typeof addr === 'string' ?
            'pipe ' + addr :
            'port ' + addr.port;
        debug('Listening on ' + bind);
    })
})

/**
 * Set Socket.IO to the latest server 
 */
io.server(module.exports)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}